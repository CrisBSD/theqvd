#!/usr/bin/perl -w
use strict;
use lib 'lib';
use Getopt::Long;
use IO::Socket::INET;
use QVD::CommandInterpreter::Client;
use Log::Log4perl qw(:easy);

my ($help);
my $interpreter_addr = "localhost:2000";
my $remote_addr;
my $localport;

my $cmd_connect_serial;
my $cmd_getversion;
my $cmd_gethelp;

GetOptions("help"                => \$help,
           "interpreter|i=s"     => \$interpreter_addr,
           "serial|s=s"          => \$cmd_connect_serial,
           "getversion"          => \$cmd_getversion,
           "gethelp"             => \$cmd_gethelp,
           "remote|r=s"          => \$remote_addr,
           "localport=s"         => \$localport
 ) or die "Getopt failed: $!";

if ( $help ) {
	print <<HELP;
Syntax: $0 [arguments]

HELP
}


my $log_config = '/etc/qvd/qvdconnect-log.conf';
if ( -f $log_config ) {
	Log::Log4perl::init($log_config);
} else {
	Log::Log4perl::easy_init($ERROR);
}
my $log = Log::Log4perl->get_logger('qvdcmd');
$SIG{__WARN__} = sub { $log->warn(shift); };
$SIG{__DIE__}  = sub { $log->error(shift); };



my $client = new QVD::CommandInterpreter::Client(host => $interpreter_addr);

if ( $cmd_getversion ) {
	print $client->version() . "\n";
} elsif ( $cmd_gethelp ) {
	print $client->help() . "\n";
} elsif ( $cmd_connect_serial ) {
	if ( ! ($remote_addr || $localport) ) {
		print STDERR "Error: --remote argument required\n";
		exit(1);
	} else {
		my $socat = $client->socat($cmd_connect_serial);
		if ( $socat ) {
			$log->info("Remote socat started, connecting to " . ($remote_addr ? $remote_addr : $localport) );
			print "Remote socat started\n";
		}

		my $fileno = fileno($socat);
		open(STDIN, "<&$fileno") or die "Can't reopen stdin: $!";
		open(STDOUT, ">&$fileno") or die "Can't reopen stdout: $!";
		STDIN->autoflush(1);
		STDOUT->autoflush(1);
		if ( $remote_addr ) {
			exec("/usr/bin/socat", "-", "tcp:$remote_addr,nonblock,reuseaddr,retry=5");
		} elsif ( $localport ) {
			exec("/usr/bin/socat", "-", "PTY,link=$localport,raw,echo=0");
		}
	}
}


