#!/usr/bin/perl -w
use strict;
use lib 'lib';
use Getopt::Long;
use IO::Socket::INET;
use QVD::CommandInterpreter::Client;
use Log::Log4perl qw(:easy);
use App::Daemon qw( daemonize );

use Fcntl;

my ($help);
my $interpreter_addr = "localhost:2000";
my $remote_addr;
my $localport;
my $std;

my $cmd_connect_serial;
my $cmd_getversion;
my $cmd_gethelp;
my $daemonize;

GetOptions("help"                => \$help,
           "interpreter|i=s"     => \$interpreter_addr,
           "serial|s=s"          => \$cmd_connect_serial,
           "getversion"          => \$cmd_getversion,
           "gethelp"             => \$cmd_gethelp,
           "remote|r=s"          => \$remote_addr,
           "localport=s"         => \$localport,
           "daemonize"           => \$daemonize,
           "std"                 => \$std
 ) or die "Getopt failed: $!";

if ( $help ) {
	print <<HELP;
Syntax: $0 [arguments]

--help              Shows this help
--interpreter ADDR  Host and port where qvdcmd is listening
--getversion        qvdcmd's version
--gethelp           qvdcmd's 'help' output
--serial PORT       Serial port on the client(qvdcmd's) side to forward
--remote ADDR       Remote socat to forward the serial port to
--localport PORT    Local port to forward the serial port to
--daemonize         Daemonize. Only applies to --serial

The --serial argument requires either --remote, --local or --std

To connect the client's /dev/ttyS0 with a socat listening on port 1234
on remotehost:

 qvdconnect --serial /dev/ttyS0 --remote remotehost:1234

To connect the client's /dev/ttyS0 to a local virtual port:

 qvdconnect --serial /dev/ttyS0 --localport /dev/ttyS0


HELP
}


my $log_config = '/etc/qvd/qvdconnect-log.conf';
if ( -f $log_config ) {
	Log::Log4perl::init($log_config);
} else {
	Log::Log4perl::easy_init($ERROR);
}
my $log = Log::Log4perl->get_logger('qvdcmd');
$SIG{__WARN__} = sub { $log->warn(shift); };
$SIG{__DIE__}  = sub { $log->error(shift); };



my $client = new QVD::CommandInterpreter::Client(host => $interpreter_addr);

if ( $cmd_getversion ) {
	print $client->version() . "\n";
} elsif ( $cmd_gethelp ) {
	print $client->help() . "\n";
} elsif ( $cmd_connect_serial ) {
	if ( ! ($remote_addr || $localport || $std ) ) {
		print STDERR "Error: --remote or --localport argument required\n";
		exit(1);
	} else {
		my $socat = $client->socat($cmd_connect_serial);
		if ( $socat ) {
			$log->info("Remote socat started, connecting to " . ($remote_addr ? $remote_addr : $localport) );
			print STDERR "Remote socat started\n";
		}

		my $fileno = fileno($socat);
		if (!$std) {
			open(STDIN, "<&$fileno") or die "Can't reopen stdin: $!";
			open(STDOUT, ">&$fileno") or die "Can't reopen stdout: $!";
			STDIN->autoflush(1);
			STDOUT->autoflush(1);
		} else {

			my $flags = fcntl($socat, F_GETFL, 0);
			fcntl($fileno, F_SETFL, $flags & (~FD_CLOEXEC));

		}

		if ( $daemonize ) {
			$log->debug("Daemonizing");
			daemonize();
		}

		my @exec_cmd;
		if ( $remote_addr ) {
			@exec_cmd = ("/usr/bin/socat", "-", "tcp:$remote_addr,nonblock,reuseaddr,retry=5");
		} elsif ( $localport ) {
			@exec_cmd = ("/usr/bin/socat", "-", "PTY,link=$localport,raw,echo=0");
		} elsif ( $std ) {
			@exec_cmd = ("/usr/bin/socat", "FD:$fileno", "-");
		} else {
			die "Internal error: Don't know how to call socat";
		}

		$log->debug("Running socat: " . join(' ', @exec_cmd));
		exec(@exec_cmd) or die "exec failed: $!";
	}
}


