#!/usr/lib/qvd/bin/perl -w
use strict;
use lib 'lib';
use Getopt::Long;
use IO::Socket::INET;
use QVD::CommandInterpreter::Client;
use File::Spec;
use Fcntl;
use QVD::Config::Core qw(set_core_cfg core_cfg);
use POSIX;

my $user_dir;

BEGIN {
	my $WINDOWS = ($^O eq 'MSWin32');
	my $DARWIN = ($^O eq 'darwin');

	$user_dir = File::Spec->rel2abs($WINDOWS
				? File::Spec->join($ENV{APPDATA}, 'QVD')
				: File::Spec->join((getpwuid $>)[7] // $ENV{HOME}, '.qvd'));
	mkdir($user_dir);

	my $def_logfile = File::Spec->join($user_dir, 'qvdconnect.log');

	set_core_cfg('qvdconnect.log.filename', $def_logfile) unless defined core_cfg('qvdconnect.log.filename', 0);

	$QVD::Log::DAEMON_NAME = 'qvdconnect';
}

use QVD::Log;

my ($help);
my $interpreter_addr = "localhost:11100";
my $socat_binary     = "/usr/bin/socat";
my $pidfile;

my $remote_addr;
my $localport;
my $std;

my $cmd_connect_serial;
my $cmd_getversion;
my $cmd_gethelp;
my $daemonize;
my $stop;
my $log_socat;

DEBUG("Called with arguments: " . join(' ', @ARGV));

GetOptions("help"                => \$help,
           "interpreter|i=s"     => \$interpreter_addr,
           "serial|s=s"          => \$cmd_connect_serial,
           "getversion"          => \$cmd_getversion,
           "gethelp"             => \$cmd_gethelp,
           "remote|r=s"          => \$remote_addr,
           "localport=s"         => \$localport,
           "daemonize"           => \$daemonize,
           "stop"                => \$stop,
           "socat=s"             => \$socat_binary,
           "log-socat"           => \$log_socat,
           "std"                 => \$std,
           "pidfile=s"           => \$pidfile
 ) or die "Getopt failed: $!";

if ( $help ) {
	help();
}

my $log = Log::Log4perl->get_logger('qvdcmd');
$SIG{__WARN__} = sub { $log->warn(shift); };
$SIG{__DIE__}  = sub { $log->error(shift); };







if ( $cmd_getversion ) {
	my $client = new QVD::CommandInterpreter::Client(host => $interpreter_addr);
	print $client->version() . "\n";
} elsif ( $cmd_gethelp ) {
	my $client = new QVD::CommandInterpreter::Client(host => $interpreter_addr);
	print $client->help() . "\n";
} elsif ( $cmd_connect_serial ) {

	if ( $daemonize || $stop ) {
		
		if ( !$pidfile ) {
			$pidfile = "qvdconnect";
			$pidfile .= get_port_filename($cmd_connect_serial) . ".pid";
			$pidfile = File::Spec->join($user_dir, $pidfile);
		}

		if ( -f $pidfile ) {
			INFO("Stopping process with pidfile $pidfile");
			stop_daemon($pidfile);
		} else {
			if ( $stop ) {
				LOGDIE "Process for port $cmd_connect_serial not running";
			}
		}

		if ( $stop ) {
			exit(0);
		}
	}

	my $client = new QVD::CommandInterpreter::Client(host => $interpreter_addr);
	my $pid;

	if (!-x $socat_binary) {
		die "$socat_binary not found. Please install socat";
	}

	if ( ! ($remote_addr || $localport || $std ) ) {
		die "Error: --remote or --localport argument required";
	} else {
		my $socat = $client->socat($cmd_connect_serial);

		if ( $socat ) {
			$log->info("Remote socat started, connecting to " . ($remote_addr ? $remote_addr : $localport) );
			print STDERR "Remote socat started\n";
		}

		my $fileno = fileno($socat);
		if (!$std) {
			open(STDIN, "<&$fileno") or die "Can't reopen stdin: $!";
			open(STDOUT, ">&$fileno") or die "Can't reopen stdout: $!";
			STDIN->autoflush(1);
			STDOUT->autoflush(1);
		} else {
			my $flags = fcntl($socat, F_GETFL, 0);
			fcntl($fileno, F_SETFL, $flags & (~FD_CLOEXEC));
		}

		my @exec_cmd = ($socat_binary);

		if ( $log_socat ) {
			my $log_file = File::Spec->join($user_dir, "socat" . get_port_filename($cmd_connect_serial) . ".log");
			push @exec_cmd, "-lf$log_file";
			DEBUG "socat log set to $log_file";
		}

		if ( $remote_addr ) {
			push @exec_cmd, ("-", "tcp:$remote_addr,nonblock,reuseaddr,retry=5");
		} elsif ( $localport ) {
			push @exec_cmd, ("-", "PTY,link=$localport,raw,echo=0");
		} elsif ( $std ) {
			push @exec_cmd, ("FD:$fileno", "-");
		} else {
			die "Internal error: Don't know how to call socat";
		}

		if ( $daemonize ) {
			daemonize($pidfile);

			# Only start monitor when daemonizing. No pid file
			# when running in console mode, so no monitor needed
			DEBUG "Starting monitor";
			$pid = fork();
			LOGDIE "fork failed" if ($pid < 0);
		}

		


		if ( $pid ) {
			DEBUG "Waiting for child $pid to terminate";
			my $killed = 0;

			$SIG{TERM} = sub {
				$killed = 1;
			};
	
			my $dead_pid;
			while(($dead_pid = waitpid($pid, WNOHANG)) != $pid) {
				DEBUG "Waiting for child $pid";

				if ( $killed ) {
					DEBUG "SIGTERM received, killing child";
					kill_process($pid);
				}
				
				sleep 1;
			}


			DEBUG "Child $pid terminated, exiting";
			unlink($pidfile);
		} else {
			# $pid is undef when not running as a daemon
			DEBUG "Child with pid $$" if ( defined $pid );

			DEBUG "Running socat: " . join(' ', @exec_cmd);
			exec(@exec_cmd) or die "exec failed: $!";
		}
	}
} else {
	help() if ( !$stop);
}


sub stop_daemon {
	my ($pidfile) = @_;
	my $pid = read_file($pidfile);
	kill_process($pid);
	unlink($pidfile) or ERROR("Can't unlink $pidfile: $!");
}

sub kill_process {
	my $pid = shift;

	my $sig = "TERM";
	my $retries = 3;

	while(1) {
		DEBUG("Killing pid $pid with sig $sig, $retries retries left");
		kill($sig, $pid);

		if (!kill(0, $pid)) {
			INFO("Killed pid $pid");
			last;
		} else {
			$retries--;
			if ($retries == 0 ) {
				WARN("Pid $pid refusing to terminate, trying SIGKILL");
				$sig = "KILL";
			} elsif ( $retries < 0 ) {
				ERROR("Failed to terminate pid $pid, giving up");
				last;
			}
		}

		sleep 1;
	}
}

sub read_file {
	my $file = shift;
	open(F, '<', $file) or die "Can't open $file: $!";
	local $/;
	undef $/;
	my $data = <F>;
	close F;

	return $data;
}

sub get_port_filename {
	my ($portname) = @_;
	if ( $portname ) {
		$portname =~ s/[^A-Za-z0-9]/_/g;
		return "-$portname";
	} else {
		return "";
	}
}

sub daemonize {
	my $pidfile = shift;

	DEBUG "Daemonizing";
	$SIG{HUP} = 'IGNORE';
	$SIG{TERM} = 'IGNORE';

	my $pid = fork();
	LOGDIE "fork failed" if ( $pid < 0 );
	exit(0) if ( $pid );

	POSIX::setsid();

	DEBUG "Now running as pid $$";
	open(PID, '>', $pidfile) or LOGDIE "Can't create pidfile $pidfile: $!";
	print PID "$$\n";
	close(PID);
	DEBUG "Wrote pid file $pidfile";
}

sub help {
	print <<HELP;
Syntax: $0 [arguments]

--help              Shows this help
--interpreter ADDR  Host and port where qvdcmd is listening
--getversion        qvdcmd's version
--gethelp           qvdcmd's 'help' output
--serial PORT       Serial port on the client(qvdcmd's) side to forward
--remote ADDR       Remote socat to forward the serial port to
--localport PORT    Local port to forward the serial port to
--daemonize         Daemonize. Only applies to --serial
--stop              Stop a running daemon.
--log-socat         Log socat messages
--pidfile FILE      PID file name. Autogenerated from --serial if not specified


The --serial argument requires either --remote, --local or --std

To connect the client's /dev/ttyS0 with a socat listening on port 1234
on remotehost:ok,

 qvdconnect --serial /dev/ttyS0 --remote remotehost:1234

To connect the client's /dev/ttyS0 to a local virtual port, running as
a daemon:

 qvdconnect --daemonize --serial /dev/ttyS0 --localport /dev/ttyS0

To stop the daemon:

 qvdconnect --stop --serial /dev/ttyS0

HELP
}