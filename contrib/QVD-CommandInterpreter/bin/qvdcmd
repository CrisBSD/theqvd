#!/usr/lib/qvd/bin/perl -T
use strict;
use warnings;
use lib 'lib';
use Carp;
use Getopt::Long;
use QVD::CommandInterpreter;
use IO::Socket::INET;
use Log::Log4perl qw(:easy);
use QVD::Config::Core;
use POSIX ":sys_wait_h";
use Data::Dumper qw(Dumper);
local $| = 1;

# Protocol:
#
# The prompt is "\n> "
# 
# The format is a command/response pattern, except for commands that end
# the session. Currently this is the "socat" command when it succeeds.
#
# Responses are terminated by a blank line.
# Errors start with "ERROR:"
# Fatal errors start with "FATAL:"
#
# Sample session:
#
#########################
# > help
# Commands:
#     help
#     version
#     socat
#
# > version
# 3.1.123
#
# > socat /dev/ttyS0
#########################
#
#

my $config_file = "/etc/qvd/qvdcmd.conf";
my $debug;
my $help;
my %args;
my $listen;
my $mkconfig;

BEGIN {
	my $WINDOWS = ($^O eq 'MSWin32');
	my $DARWIN = ($^O eq 'darwin');

	my $user_dir = File::Spec->rel2abs($WINDOWS
				? File::Spec->join($ENV{APPDATA}, 'QVD')
				: File::Spec->join((getpwuid $>)[7] // $ENV{HOME}, '.qvd'));
	mkdir($user_dir);

	my $def_logfile = File::Spec->join($user_dir, 'qvdcmd.log');

	set_core_cfg('qvdcmd.log.filename', $def_logfile) unless defined core_cfg('qvdcmd.log.filename', 0);

	$QVD::Log::DAEMON_NAME = 'qvdcmd';
}
use QVD::Log;


my $log = Log::Log4perl->get_logger('qvdcmd');
local $SIG{__WARN__} = sub { $log->warn(shift); };
local $SIG{__DIE__}  = sub { $log->error(shift); };

delete $ENV{PATH};

GetOptions(
	"config|c=s"    => \$config_file,
	"debug|D"       => \$debug,
	"help|h"        => \$help,
        "listen|l=i"    => \$listen,
        "mkconfig"      => \$mkconfig
) or croak "Bad arguments";

if ( $help ) {
	print <<'HELP';
Syntax: $0 [options]
 
Options:
	--help, -h	Show this help
	--config, -c	Specify the config file to use
 
HELP
	exit(0);
}


$args{options} = {
	debug => $debug
};
use File::Temp qw(tempdir);
use Proc::Background;


# Untaint the config file. The taint check is for the data coming
# from the socket.

$config_file = untaint($config_file);

if ( $config_file && -f $config_file ) {
	$log->info("Loading config file $config_file");

	eval {
		$args{config} = do($config_file);
		1;
	};
	if ($@) {
		print "FATAL: Syntax error in config file: $@\n";
		exit(1);
	}

	if (!$args{config} || ref($args{config}) ne "HASH" || !$args{config}->{socat}) {
		print "FATAL: Bad config file\n";
		exit(2);
	}

}

if ( $mkconfig ) {
	my $cmd = QVD::CommandInterpreter->new( %args );
	print "my \$config;\n";
	print Data::Dumper->Dump([$cmd->{config}], ["config"]);
	exit(0);
}

if ( $listen ) {
	my $terminate = 0;
	my $term_sig  = "";

	$log->info("Listening on localhost, port $listen");

	my $listener = IO::Socket::INET->new(Listen    => 5,
	                                    LocalAddr => 'localhost',
	                                    LocalPort => $listen);

	if ( !$listener ) {
		croak "Failed to listen on port $listen";
	}

	#$SIG{CHLD} = sub { while( waitpid( -1, &WNOHANG ) > 0 ) {} };
	local $SIG{HUP}  = 'IGNORE';
	local $SIG{TERM} = sub { $terminate = 1; $term_sig = "SIGTERM" };
	local $SIG{INT}  = sub { $terminate = 1; $term_sig = "SIGINT" };

	while((!$terminate) && (my $socket = $listener->accept())) {
		my $fileno = fileno($socket);

		$log->info("Accepted connection");

		if ( defined $fileno ) {
			my $pid = fork();

			if ( !$pid ) {
				#$SIG{CHLD} = 'DEFAULT';
				local $SIG{TERM} = 'DEFAULT';
				local $SIG{INT}  = 'DEFAULT';

				open(STDIN, "<&", "$fileno") or croak "Can't reopen stdin: $!";
				open(STDOUT, ">&", "$fileno") or croak "Can't reopen stdout: $!";
				STDIN->autoflush(1);
				STDOUT->autoflush(1);
				print "Connected\n";
				my $cmd = QVD::CommandInterpreter->new( %args );
				$cmd->run();
				$socket->shutdown(2);

				$log->debug("Child process $$ exiting");
				exit(0);
			} else {
				$log->debug("Started child $pid");
			}
		} else {
			croak "no file handle!";
		}
	}
	
	if ( $terminate ) {
		$log->info("Terminating due to signal $term_sig");
	} else {
		$log->info("Listener terminated, odd");
	}
	$listener->shutdown(2);
	$listener->close();

	
} else {
	my $cmd = QVD::CommandInterpreter->new( %args );
	$cmd->run();
}

sub untaint {
	my $arg = shift;
	$arg =~ /(.*)/xs;
	return $1;
}

