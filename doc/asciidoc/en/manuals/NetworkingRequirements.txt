Networking Requirements
~~~~~~~~~~~~~~~~~~~~~~~
QVD Server Nodes make use of a network bridge and virtual network interfaces to facilitate
networking across each of the virtual machines that run on the node. In order to automatically
provision IP addresses to virtual machines, QVD also runs a DHCP server that will allocate
IP addresses within the virtual network range to virtual hosts as they boot up. It is therefore
extremely important that you choose a network range that is unlikely to conflict with any of your
other existing infrastructure for this purpose. Services running on systems in the same IP network
may be affected by QVD or any of the virtual machines that run within QVD.

ifdef::adminmanual[]
The image below provides an indication of the typical networking involved in setting up a QVD
multinode deployment.

image::../images/qvd-network.png[alt="General Networking for a QVD MultiNode deployment",width="400"]

In this diagram, the 'qvdnet' network is attached to a network bridge (qvdnet0) on each server node. The HKD will
create a TAP interface for each virtual machine that it starts and will pass it to KVM as a file descriptor. The
bridge is bound to a physical NIC for each server node to facilitate the routing of network traffic for the virtual
machines.

Usually separate network interfaces (e.g. eth1 and eth2) are used to keep the Administration and Storage networks
logically separated. This helps to improve security and performance. 
endif::adminmanual[]

There are a number of configuration steps that may need to be configured manually in order
to properly set up the networking for a QVD Server Node. There are often other ways to achieve
an appropriate network configuration, so we provide these only as guidelines.

Set dnsmasq to be controlled by QVD
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

QVD uses dnsmasq as a DHCP and DNS server for the virtual machines
that run in a node. In order to function correctly, dnsmasq needs to
be run by the qvd-node process. By default, the Ubuntu package starts
the process running as a daemon in the background, so you need to stop 
it from starting automatically. This is done with the following commands.

----
# /etc/init.d/dnsmasq stop
# sed -i s/ENABLED=1/ENABLED=0/ /etc/default/dnsmasq
----

Note: This step is essential in order for QVD to work using KVM virtualization. For LXC
virtualization, it is possible to specify whether or not to make use of DHCP to configure
the networking within your virtual machines.

Configure IP forwarding
^^^^^^^^^^^^^^^^^^^^^^^

IP Forwarding is required in order to route clients to the correct location.
You can do this quickly by running the following command.

----
# echo 1 > /proc/sys/net/ipv4/ip_forward
----

Unfortunately, when you reboot you host system, this change will be
lost. To make it permanent, you can edit `/etc/sysctl.conf` and
uncomment the line:

----
net.ipv4.ip_forward=1
----

You can force sysctl to reload its settings after you have edited this
file by running:

----
# sysctl -p
----

Configure a Network Bridge
^^^^^^^^^^^^^^^^^^^^^^^^^^
There are a number of ways to go about configuring your network bridge
and the appropriate routing to make sure that a QVD client is routed
to the correct virtual machine.

The easiest method is to set up a static network interface and to
configure a set of *iptables* routing rules to perform the NAT
required to translate IP addresses between your real and virtual
network interfaces. Using NAT is necessary within a mononode installation,
but on a deployment using multiple nodes and where different components run
on different systems, the iptables routing rules would not be necessary.
To configure you networking, edit the file `/etc/network/interfaces` and add 
the following lines.

----
auto qvdnet0
iface qvdnet0 inet static
  pre-up brctl addbr qvdnet0
  pre-up iptables -t nat -A POSTROUTING -o qvdnet0 -j SNAT to-source 192.168.0.2
  pre-up iptables -t nat -A PREROUTING -d 192.168.0.2 -p tcp --dport 8443 -j DNAT --to-destination 10.3.15.1
  address 10.3.15.1
  netmask 255.255.255.0
----

It is important to note that in the above example you will need to
change the IP address *192.168.0.2* to the IP address of the network
interface that you intend your clients to connect to. In the example
above we are using the *10.3.15.0/24* range for the virtual network used
by QVD. This range should be unique within your infrastructure and should
be dedicated to QVD usage, so that services starting within QVD do not impact
on other systems within your network.

While there are other cleaner approaches to setting up your network,
these sometimes run into problems with particular network interfaces
such as WIFI. The approach listed above should work for most systems. Remember that
the NAT provided using iptables, as presented in the example above, is only required
for mononode installations.

Once you have written the network configuration to file, you should
bring up the network bridge interface.

----
# ifup qvdnet0
----

NOTE: If using SLES, we recommend that you use Yast2 to configure your network bridge.

Configure QVD for your Networking
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
In order for QVD to properly manage virtual machine setup and the subsequent routing,
you will need to change some configuration settings within QVD-DB. It is recommended
that you make use of the <<qvd-admin-cli,QVD CLI Administration Utility>> to do this.

These settings are used to provide a dedicated networking environment for your 
virtual machines to run. You should use IP addresses and network ranges that do not
conflict with your existing network infrastructure. In the example
below we are using the *10.3.15.0/24* range for the virtual network used
by QVD. This range should be unique within your infrastructure and should
be dedicated to QVD usage, so that services starting within QVD do not impact
on other systems within your network.

----
# qvd-admin.pl config set vm.network.ip.start=10.3.15.50
# qvd-admin.pl config set vm.network.netmask=24
# qvd-admin.pl config set vm.network.gateway=10.3.15.1
# qvd-admin.pl config set vm.network.dns_server=10.3.15.254
# qvd-admin.pl config set vm.network.bridge=qvdnet0
----

ifdef::adminmanual[]
These settings are described in more details in the section of this document entitled <<vm_options,Virtual Machine Options>> in the 
Base QVD Configuration chapter.
endif::adminmanual[]

ifndef::adminmanual[]
These settings are described in more details in the section of the *QVD Administration Manual* entitled *Virtual Machine Options* in the 
*Base QVD Configuration* chapter.
endif::adminmanual[]