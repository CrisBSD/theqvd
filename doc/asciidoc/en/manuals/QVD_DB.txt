[[QVD-DB]]
The QVD-DB is the glue that ties all of the QVD components together.
It makes use of an underlying PostgreSQL DBMS, and should be installed
on an Ubuntu 10.04 (Lucid Lynx) GNU/Linux operating system.

.The QVD-DB is used to link together different components
image::../images/qvd_db_access.png[alt="The QVD-DB is used to link together different components", width="250"]

All of the configuration and runtime information for the entire QVD
VDI is stored in the database and if it fails the full platform will 
stop working. For that reason, it is highly recommended that the database 
is installed in a high availability configuration. You can find out
how to configure PostgreSQL in an HA configuration at
link:http://www.slideshare.net/jessejajti/hadrbdpostgres-postgreswest-08-presentation[Linux-HA
+ DRBD + PostgreSQL ] and link:http://fanqiang.chinaunix.net/db/psql/2005-09-07/3628.shtml[High Avaibility PostgreSQL
HOWTO].

The actual hardware requirements for QVD-DB are very modest and any
modern server with just two CPU cores and 2GB of RAM will be able to
support the database load.

IMPORTANT: At the moment QVD works only on PostgreSQL 8 which is the
default version provided with Ubuntu 10.04 (Lucid Lynx). If you are
installing on a later distribution or on an alternative platform such
as SuSE Linux, you may need to downgrade to the appropriate version of
PostgreSQL.

Installing and configuring QVD-DB
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
On the system that you intend to install QVD-DB, you will need to add
the QVD repository to your apt sources. You can do this with the
following command:

----
sudo apt-add-repository ppa:qvd-qindel/qvd-3.1
----

Execute `apt-get update` after modifying sources.list.

The preferred way to install the central database is with the package
qvd-db. It installs the PostgreSQL database system if needed, and
provides the tools to provision the database. You should do this as
root, as you will need to perform a number of steps that will require
full root privileges:

----
root@myserver:~# apt-get install qvd-db
----

Creating the QVD User and Database
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
You will need to create a user within PostgreSQL to access the QVD
Database, and you will need to create the actual database where QVD
can set up its tables and store its data. To do this, you will need to
use the sudo command to change to the postgres account:

----
$ sudo su - postgres
----

As the 'postgres' user, you can create PostgreSQL user accounts
with the `createuser` command. It will prompt for a password for the 
new user and ask some details on the user account. In general, you can 
answer 'n' to all of the options that are presented.

For example, to create a user called qvd you would use the
following command.

----
postgres@myserver:~$ createuser -P qvd
Enter password for new role: passw0rd
Enter it again: passw0rd
Shall the new role be a superuser? (y/n) n
Shall the new role be allowed to create databases? (y/n) n
Shall the new role be allowed to create more new roles? (y/n) n
----

TIP: For more information on this command, please refer to the
PostgreSQL documentation at: http://www.postgresql.org/docs/8.4/static/app-createuser.html

The new user can now be assigned as the owner of a database. To create
a database for QVD and to assign ownership, use the `createdb` command. 
Use the -O switch to set the database's owner to the account you wish to use. 
In this case we will set the owner to the new user that we created in the 
previous step.

----
postgres@myserver:~$ createdb -O qvd qvddb
----

TIP: For more information on this command, please refer to the
PostgreSQL documentation at: http://www.postgresql.org/docs/8.4/static/app-createdb.html

PostgreSQL Configuration Requirements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
In order to support concurrent access from all the nodes in the QVD
farm and handle transactions coherently, the transaction isolation
level must be changed from 'read commited' to 'serializable'. This is
a very important step that should not be ommited or your database
would eventually become inconsistent and QVD fail to work.

Furthermore, it is necessary to allow network access to the database.
By default, it is usually set to only listen for queries on localhost.
This should be changed to listen on all interfaces.

To do this you must edit the PostgreSQL configuration files postgresql.conf and pg_hba.conf. On Ubuntu they
are located in /etc/postgresql/8.4/main. On SuSE systems, you will find these files in /var/lib/pgsql/data.

The transaction isolation level is controlled with the default_transaction_isolation setting. 
To enable network access to PostgreSQL in general, change the listen_addresses 
setting from 'localhost' to '*'.

----
root@myserver:~# cd /etc/postgresql/8.4/main #this would be /var/lib/pgsql/data on SLES
root@myserver:/etc/postgresql/8.4/main# vi postgresql.conf
listen_addresses = '*'
default_transaction_isolation = 'serializable'
----

To enable network access for the user qvd, add the following line to
pg_hba.conf (its format follows: host database user CIDR-address auth-method
[auth-options]).

----
root@myserver:/etc/postgresql/8.4/main# vi pg_hba.conf
host  qvddb qvd 192.168.0.0/24  md5
----

NOTE: Make sure to replace the default network 192.168.0.0/24 with the
network that your QVD platform uses.

Restart PostgreSQL for the changes to take effect.
----
root@myserver:~# /etc/init.d/postgresql restart
----

Provisioning QVD-DB
~~~~~~~~~~~~~~~~~~~
The QVD-DB package includes a script that will help you to provision
the QVD Database with all of the tables that are required for QVD to
function correctly. In order for this script to work, it requires that
the QVD Database settings have been correctly entered in the
`/etc/qvd/node.conf` file.

To provision the database, execute qvd-deploy-db.pl.

----
# qvd-deploy-db.pl
----

Once you have run this command, QVD-DB will be ready to use by any
component within the QVD environment.

.Resetting QVD
****
If at some point you just want to remove all the nodes, images,
virtual machines, etc. configured in QVD in order to start over (for
instance, if you are testing it), you can use the same command with
the `--force` parameter:

----
# qvd-deploy-db --force
----

Note that there is no way to undo this operation once it has been run.
All data within the database will be dropped and the database will be
reinitialized. Use this command with care!
****

Testing access to QVD-DB
~~~~~~~~~~~~~~~~~~~~~~~~

Any system that requires access to the database (e.g. any of the QVD
Server Node components, the QVD-WAT or the CLI Administration utility)
should be tested to ensure that database connectivity is available.
This can be easily achieved by connecting to the database and listing
the tables used by QVD. To do this, you will need to ensure that you
have the PostgreSQL client installed on the host that you are
connecting from. You can install this by issuing the following
command:

----
# sudo apt-get install postgresql-client
----

To list the tables in the QVD database using the PostgreSQL client,
you can do the following:

----
anyuser@otherserver:~$ psql -U qvd -W -h myserver qvddb
Password for user qvd:Â·
psql (8.4.1, server 8.3.10)

qvddb=> \d

               List of relations
 Schema |      Name       |   Type   |  Owner  
--------+-----------------+----------+---------
 public | configs            | table    | hue
 public | di_properties      | table    | hue
 public | di_tags            | table    | hue
 public | di_tags_id_seq     | sequence | hue
 public | dis                | table    | hue
 public | dis_id_seq         | sequence | hue
 public | host_cmds          | table    | hue
 public | host_properties    | table    | hue
 public | host_runtimes      | table    | hue
 public | host_states        | table    | hue
 public | hosts              | table    | hue
 public | hosts_id_seq       | sequence | hue
 public | osf_properties     | table    | hue
 public | osfs               | table    | hue
 public | osfs_id_seq        | sequence | hue
 public | ssl_configs        | table    | hue
 public | user_cmds          | table    | hue
 public | user_extras        | table    | hue
 public | user_extras_id_seq | sequence | hue
 public | user_properties    | table    | hue
 public | user_states        | table    | hue
 public | users              | table    | hue
 public | users_id_seq       | sequence | hue
 public | vm_cmds            | table    | hue
 public | vm_properties      | table    | hue
 public | vm_runtimes        | table    | hue
 public | vm_states          | table    | hue
 public | vms                | table    | hue
 public | vms_id_seq         | sequence | hue
(29 rows)

qvddb=> \q
----

Backing up and Restoring QVD-DB
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A very simple backup technique would involve dumping the entire
PostgreSQL database to file:

----
pg_dump -U postgres postgres > yourfile.backup
----

To rollback your database to match a backup file, you can run the
following command:

----
psql -U postgres postgres < yourfile.backup
----

TIP: For advanced operations, check http://www.postgresql.org/docs/8.4/static/backup.html

QVD-DB Data Relationship Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The following diagram shows the general data model for data stored
within the QVD-DB. 

IMPORTANT: It is recommended that Administrators do not attempt to 
modify entries in the database directly as it is highly likely that 
this will break the QVD installation. Any changes made to the data
stored in the database, outside of those achieved using the QVD tools,
will void any support agreement.

NOTE: This diagram is under review and will be updated in later
versions of this manual, in an effort to fit more closely with the
actual tables within the database.

.QVD-DB General Data Model
image::../images/data-model.png[alt="QVD-DB General Data Model" width=98%]
