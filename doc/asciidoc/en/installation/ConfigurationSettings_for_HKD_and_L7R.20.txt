Configuration Settings for HKD and L7R
======================================
Santiago Doblas
v0.1, 20 december 2010
:author initials: SD
:email: sdoblas@qindel.com


Core config
-----------

These settings have to be defined in /etc/qvd/node.conf.

nodename::
    Host name where the DBMS is located. Usually the hostname. 

database.host = localhost::
    DB source host. By default localhost. 

database.user = qvd::
    User name for the DB. By default qvd 

database.name = qvd::
    DB source name. By default qvd 

database.password::
    Password for database.user. REQUIRED 

path.run = /var/run::
    Directory that contains execution data; nxagent pid, output, state... By default, /var/run/qvd. 

path.log = /var/log::
    General log file. 

log.filename = $path.log/qvd.log::
    Log file name. 

log.level = INFO::
    Log level, one of: ALL, DEBUG, INFO, WARN, ERROR, FATAL, OFF 

l7r.as_user = qvd::
    L7R operative user. 

l7r.pid_file = $path.run/qvd/l7r.pid::
    File that keeps the L7R process id. By default, /var/run/qvd/l7r.pid. 

l7r.address = *::
    Listening address for incoming connections. 

hkd.as_user = qvd::
    HKD operative user. 

hkd.pid_file = $path.run/qvd/hkd.pid::
    Is the file that keeps the HKD process id. By default, /var/run/qvd/hkd.pid. 

wat.admin.login = admin::
    Administration login, admin. 

wat.admin.password::
    Administration user password. 

More config
-----------

These settings can be defined in /etc/qvd/node.conf or in the database (recommended).

Directory paths
~~~~~~~~~~~~~~~

 path.storage.root = /var/lib/qvd/storage

Base path to storage. 

 path.storage.staging = ${path.storage.root}/staging:: Path to the temporary image templates files location.

 path.storage.images = ${path.storage.root}/images:: Images storage path

 path.storage.overlays = ${path.storage.root}/overlays:: Overlays images storage path.

 path.storage.homes = ${path.storage.root}/homes:: User data storage path.

Virtualization
~~~~~~~~~~~~~~

 command.kvm = kvm

Program used to run virtual machines. Must accept the parameters used by kvm, like for example qemu-i386. 

 command.kvm-img = kvm-img

Program used to create disk images. Must accept the parameters used by qemu-img and kvm-img. 

 vm.network.bridge = qvdnet0

The name of the network bridge where the virtual machine network interfaces are addded. By default qvdnet0. 

 vm.network.dhcp-range

The IP address range that is reserved for virtual machines. For example 10.0.1.1,10.0.255.254. The range must be included in a network the node is in. REQUIRED. 

 vm.network.netmask

The network mask for the virtual machine network, as a simple number. For example 24 for the mask 255.255.255.0. REQUIRED. 

 vm.network.gateway

The IP address for the default route the virtual machines should use. REQUIRED. 

 vm.overlay.persistent = 0

If equals to 0 ... 

 l7r.auth.plugins = default

What is this? 

 l7r.use_ssl = 1 l7r.port = 8443

 internal.l7r.timeout.x_start = 10

 internal.l7r.timeout.vm_start = 270

 internal.hkd.timeout.state.running = 120

 internal.hkd.timeout.state.starting = 240

 internal.hkd.timeout.state.stopping_1 = 30

 internal.hkd.timeout.state.stopping_2 = 40

 internal.hkd.timeout.state.zombie_1 = 30

 internal.hkd.timeout.vma = 4

vma hooks
~~~~~~~~~

    * vma.on_action.connect 

    * vma.on_action.disconnect 

    * vma.on_action.suspend 

    * vma.on_action.poweroff 

    * vma.on_state.connected 

    * vma.on_state.suspended 

    * vma.on_state.disconnected 

    * vma.on_provisioning.mount_home 

    * vma.on_provisioning.add_user 

    * vma.on_provisioning.after_add_user 

L7R Authentication Plugins
~~~~~~~~~~~~~~~~~~~~~~~~~~~

LDAP
^^^^

    * auth.ldap.host 

    * auth.ldap.base 

    * auth.ldap.filter = (uid=%u) 

    * auth.ldap.scope = base 

base|sub|one

Auto (auto provisioning)
^^^^^^^^^^^^^^^^^^^^^^^^

    * auth.auto.osi_id :: ID of the OSI to use when autoprovisioning VMs 

Load balancer
~~~~~~~~~~~~~

	l7r.loadbalancer.plugin = default

The load balancer plugin to be used. 

Default load balancer configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


The default load balancer chooses the node that has the highest quantity of free resources. The free resources are calculated as the weighted sum of free RAM, unused CPU, and a random number to bring some entropy to the result. The individual weights are configurable.


	l7r.loadbalancer.plugin.default.weight.ram = 1

Weight given for RAM 

	l7r.loadbalancer.plugin.default.weight.cpu = 1

Weight given for CPU 

	l7r.loadbalancer.plugin.default.weight.random = 1

Weight given for random 

