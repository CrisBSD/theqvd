OpenSSO Authentication
======================

Quick explanation, assuming an OSI ID of 1.

----
scp libqvd-l7r-authenticator-plugin-opensso-perl_0.01-1_all.deb ptemhost1:
scp libqvd-l7r-authenticator-plugin-opensso-perl_0.01-1_all.deb ptemhost1:

ptemhost1 # dpkg -i libqvd-l7r-authenticator-plugin-opensso-perl_0.01-1_all.deb
ptemhost2 # dpkg -i libqvd-l7r-authenticator-plugin-opensso-perl_0.01-1_all.deb


 qvd-admin.pl config set auth.opensso.rest_auth_uri=http://ptemsso.int.qindel.com:8080/opensso/identity/authenticate
 qvd-admin.pl config set auth.opensso.target_uri=http://ptemsso.int.qindel.com:8080/myqvd
 qvd-admin.pl config set auth.opensso.cookiedomain=.qindel.com
 qvd-admin.pl config set auth.auto.osi_id=1
 qvd-admin.pl config set l7r.auth.plugins=auto,opensso
----

Copy and install source:trunk/qvd/auth-plugins/libqvd-l7r-authenticator-plugin-opensso-perl_0.01-1_all.deb into the image, and define in /etc/qvd/vma.conf:

----
vma.on_action.connect = /usr/bin/cookie_and_roles_hook.pl
----

Components
----------

    * Authentication plugin 

    * Autoprovision plugin 

    * Passing of parameters and cookie to the browser 

OpenSSO Authentication plugin
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The source code is at source:trunk/qvd/QVD-L7R-Authenticator-Plugin-Opensso/

To install the plugin, install the package source: trunk/qvd/auth-plugins/libqvd-l7r-authenticator-plugin-opensso-perl_0.01-1_all.deb on the VM server.

Example configuration:

 auth.opensso.rest_auth_uri=http://ptemsso.int.qindel.com:8080/opensso/identity/authenticate
 l7r.auth.plugins=auto,opensso
 auth.opensso.target_uri=http://ptemsso.int.qindel.com:8080/myqvd
 auth.opensso.cookiedomain=.qindel.com
 auth.auto.osi_id=1

If target_uri is not defined, no authorization will be done, only authentication.

Autoprovisioning plugin
~~~~~~~~~~~~~~~~~~~~~~~

This plugin comes included with L7R. The requirements for using it are:

    * Having an OSI image 

    * These settings: 

 auth.auto.osi_id=1

Passing parameters and cookies to the browser
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This is done using the contrib module that can be found at source:trunk/contrib/QND-QvdVmaHook-PtemPlus

The module has a script at /usr/bin/cookie_and_roles_hook.pl and a log at /var/log/qvd_opensso_hook.log

The parameters are:

    * qvd.auth.opensso.roles. This is the list of nsrole attributes for the authenticated entry. If more than one role is returned then they are separated by ":". If no roles are passed then the this attribute is the empty string.
    * qvd.auth.opensso.uri. This is the target uri used for authorization. If no authorization is used, this is usually the empty string.
    * qvd.auth.opensso.cookie. This is the cookie that can be embedded in the Firefox.
    * qvd.auth.opensso.cookiedomain. This is the host or domain where the cookie applies to. 

If cookie or cookiedomain are not defined, no parameters will be passed to Firefox. If the roles parameter is empty, they won't be passed to the user. Si los roles están vacios, éstos no se pasarán al usuario. Anyhow it is preferred to let the user log in, rather than blocking the execution of the hook. The access is supposed to be protected under OpenSSO.

More documentation
------------------

See perldoc for QND::QvdVmaHook::PtemPlus QND::QvdVmaHook::PtemPlus::FirefoxCookie QND::QvdVmaHook::PtemPlus::Roles and  QVD::L7R::Authenticator::Plugin::Opensso


