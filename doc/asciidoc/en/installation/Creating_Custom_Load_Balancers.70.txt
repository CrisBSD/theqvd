Creating custom load balancers
==============================
Santiago Doblas
v0.1, 20 december 2010
:author initials: SD
:email: sdoblas@qindel.com



Load balancers decide on which node virtual machines are started. You may want to create a custom load balancer for example if you want certain virtual machines to start on a dedicated group of nodes.

QVD has a plugin system for load balancers. A load balancer plugin is a subclass of QVD::L7R::LoadBalancer::Plugin that has to be within the package QVD::L7R::LoadBalancer::Plugin.

Plugin API
----------

get_free_host($vm) = $host_id
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Return the id of the node on which the virtual machine $vm should be started. A load balancer has to implement at least this method.

The parameter $vm is QVD::DB::Result::VM object. It gives you access to the virtual machine's attributes and properties. The attributes and properties of the VM's user and OSI can be accessed through $vm->user and $vm->osi respectively. Other data can be accessed through QVD::DB.

init()
~~~~~~

Initialize the load balancer. Use this if your load balancer has to be step up, for example by loading a persistent cache.

Minimal example: random assignment
----------------------------------

This load balancer assigns virtual machines to random backend nodes.

[source,perl]
----
package QVD::L7R::LoadBalancer::Plugin::Random;

use QVD::DB::Simple;
use parent 'QVD::L7R::LoadBalancer::Plugin';

sub get_free_host {
    my ($self, $vm) = @_;
    my $conditions = { backend => 'true',
		       blocked => 'false',
		       state   => 'running' };

    my $attr = { columns  => 'host_id' };

    my @hosts = rs(Host)->search_related('runtime', $conditions, $attr)->all;
    return $hosts[rand @hosts]->host_id;
}

1;

----


