QVD Hooks
=========
Salvador Fandino
v1.0, Jan 2011

Introducción
------------

Los 'hooks' son scripts que el agente de QVD que corre en la maquina
virtual ejecuta en determinadas ocasiones y que permiten modificar el
funcionamiento de la plataforma para adaptarlo a problematicas
concretas.

Cada uno de los posibles hooks se configura añadiendo una entrada al
fichero de configuracion "/etc/qvd/vma.conf" con el path del script a
ejecutar.

Por ejemplo, añadiendo la siguiente linea

  vma.on_action.connect = /etc/qvd/hooks/connect.sh

hace que el script "/etc/qvd/hooks/connect.sh" se ejecuta cada vez que
el usuario se conecta a la maquina virtual.

Los scripts pueden recibir en la linea de comandos parametros
relacionados con las siguentes entidades:

  - el cambio de estado, la accion, o el proceso de provision que ha
    desencadenado la llamada al hook

  - propiedades de la VM definidas en la base de datos de
    administracion

  - parametros generados por los plugins de autenticación

  - parametros de conexion del usuario

  - parametros suministrados por el programa cliente


Los hooks tienen su propio fichero de logs que normalmente se
encuentra en /var/logs/qvd/qvd-hooks.log dentro de la maquina virtual.

Action hooks
------------

Los hooks the tipo 'action' se ejecutan cada vez que se inicia una
accion.

Si el hook falla acabando su ejecucion con un codigo distinto de cero,
la acción se aborta.

Todos los hooks 'action' reciben los siguientes parametros:

  - "qvd.vm.session.state": estado actual del servidor X-Windows

  - "qvd.hook.on_action": accion que desencadena la llamada al hook


connect
~~~~~~~

clave: *vma.on_action.connect*

Este hook se ejecuta cuando el usuario inicia (o retoma) una sesion de
X-Windows desde el cliente de QVD.

Recibe tambien los siguientes parametros:

  - "qvd.vm.user.name" : login del usuario que se conecta

  - "qvd.vm.user.groups" : grupos a los que pertenece el usuario

  - "qvd.vm.user.home" : directorio home del usuario

Mas los parametros de conexion, los parametros assignados en la base
de datos a la VM, los generados por el plugin de autenticacion.

pre-connect
~~~~~~~~~~~

clave: *vma.on_action.pre-connect*

Este hook se ejecuta cuando el usuario inicia (o retoma) una sesion de
X-Windows desde el cliente de QVD.

La diferencia con respeto a 'connect' es que este ultimo se ejecuta
despues de los hooks de provision mientras que 'pre-connect' se
ejecuta antes.

Los parametros recibidos son los mismos.

stop
~~~~

clave: *vma.on_action.stop*

Este hook se ejecuta cuando se solicita el cierre de la sesion de
X-Windows (por ejemplo, a traves de la herramienta de administracion).

No recibe ningun parametro adicional.

suspend
~~~~~~~

clave: *vma.on_action.suspend*

Este hook se ejecuta cuando se suspende la session de X-Windows (por
ejemplo, cuando el usuario cierra el programa cliente de QVD).

No recibe ningun parametro adicional.

poweroff
~~~~~~~~

clave: *vma.on_action.poweroff*

Este hook se ejecuta cuando se solicita el apagado de la maquina virtual.

No recibe ningun parametro adicional.


State hooks
-----------

Los hooks de tipo 'state' se ejecutan cuando cambia el estado de la sesion de X-Windows.

Reciben el parametro "qvd.hook.on_state" con el estado actual del servidor de X-Windows.

connected
~~~~~~~~~

clave: *vma.on_state.connected*

Este hook se ejecuta una vez que se establece satisfactoriamente la
conexion entre el cliente de QVD y el servidor de X-Windows que corre
en la maquina virtual.


suspended
~~~~~~~~~

clave: *vma.on_state.suspended*

Este hook se ejecuta una vez que el usuario cierra el programa cliente
 de QVD y la sesion de X-Windows pasa a estado suspendido.

stopped
~~~~~~~

clave: *vma.on_state.disconnected*

Este hook se ejecuta cuando se termina la sesion de X-Windows


Provisioning hooks
------------------

Los host de provisionamiento reciben los mismos parametros que el 'action' hook 'connect'.


mount_home
~~~~~~~~~~

clave: *vma.on_provisioning.mount_home*

Por defecto, QVD monta la primera particion del dispositivo
configurado con la entrada "vma.user.home.drive" en el directorio
"/home" donde se crea el directorio home del usuario (en el hook
'add_user'). En caso de que no exista dicha particion en el
dispositivo, la misma se crea al vuelo.

Con este hook 'mount_home' es posible cambiar este proceso y por
ejemplo montar "/home" desde un servidor NFS.


add_user
~~~~~~~~

clave: *vma.on_provisioning.add_user*

Cuando el usuario se conecta por primera vez, si no existe todavia una
cuenta de usuario para el mismo dentro de la maquina virtual esta se
crea al vuelo.

Por defecto la cuenta de usuario se crea con el comando "useradd".

El hook 'add_user' permite modificar este proceso y crear la cuenta de
usuario de otras maneras.


after_add_user
~~~~~~~~~~~~~~

clave: *vma.on_provisioning.after_add_user*

Una vez que la cuenta de usuario ya ha sido creada, este hook puede
ser utilizado para realizar algunas acciones adicionales tales como
por ejemplo configurar el cliente de correo u otras aplicaciones.


Printing hooks
--------------

Tambien existen una serie de hooks que permiten gestionar la
configuración de las impresores, pero por ahora estos son considerados
privados, responsabilidad del equipo de desarrollo de QVD y no
modificables por el administrador de la plataforma.

Los hooks de impresion reciben como parametros la configuracion del VMA.

connected
~~~~~~~~~

clave: *internal.vma.on_printing.connected*

Este hook recibe los mismos parametros que el 'action' hook 'connect'.

suspended
~~~~~~~~~

clave: *internal.vma.on_printing.suspended*

stopped
~~~~~~~

clave: *internal.vma.on_printing.stopped*

