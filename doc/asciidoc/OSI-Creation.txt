OSI Creation {qvdversion} 
=========================
Nicolas Arenas
v0.2, 18th January 2011 
:author initials: NA
:email: nicolas.arenas@qindel.com

Requirements
------------

* Server x86 with virtualization extensions (Intel or AMD).
* Linux as OS.
* 10 GB free disk space
* qemu-kvm installed
* Ubuntu Desktop image 

Introduction
------------

An OSI (Operaqting Sistem Image) is a set composed by two elements, these are a disk image and some parameters as memory, user space, etc. 

The main idea behind an OSI is to use an OSI for each group of users that have applications in common. For example if you have a section of users that use the same applications every day all those users would share the same OSI , in this way if you have to update an application, you will update the OSI and the OSI will be pushed for all the users that share it



Package installation
--------------------

For customized packages the Ubuntu distro that must be used is Ubuntu Desktop alternate installer [ http://releases.ubuntu.com/maverick/ubuntu-10.10-alternate-i386.iso.torrent ]

Once we have downloaded the ubuntu distro, we will create a qcow2 file that will be our base for the hard disk for each VM. 

....

kvm-img create -f qcow2 example.img 4G

....

Once we have created the file we need to start a vm to install the packages that we want to be in the OSI. For this we can do. 

.... 

kvm -hda example.img -cdrom ubuntu-10.10-alternate-i386.iso -m 512

....


Now we just do an Ubuntu installation as standard basis, once that the server is installed, we just shutdown the server. When the installation is finished, we need 


VMA Installation and configuration
----------------------------------

To install the vma package, we need to add the qvd repository to our rencently image, to do this, we juswt edit the '/etc/apt/sources.list' with our preferred editor and add the following 

....
deb http://qvd.qindel.com/debian lucid main
....

After that we just need to make an update of the apt cache 

....
root@qvd:~# apt-get update
....

Now we can install the qvd-vma.  

....
root@qvd:~# apt-get get install qvd-vma.
....

Once the vma is installed, we can configure it, this is done via the file '/etc/qvd/vma.conf'. This file is readed by the vma at start time, being needed a restart to reload the configuration. 

Parameters in vma.conf
~~~~~~~~~~~~~~~~~~~~~~

Audio
^^^^^ 
....
vma.audio.enable
....

Possible values:  

0 => Audio is not enabled in the virtual machine (Default)
1 => Audio is enabled in the virtual machine

Printing
^^^^^^^^ 
....
vma.printing.enable
....

Possible Values:

0=> Printers are not enabled (Default)
1=> Printers are enabled

QVD client and the VMA will map all the printers configured on the client. At this moment printer drivers must be installed in the OSI.

PID location
^^^^^^^^^^^^
....
vma.pid_file 
....

The place where the pid resides, by default /var/run/qvd/vma.pid


Keyboard
^^^^^^^^

....
vma.default.client.keyboard
....

The default keyboard in the virtual machine, this value is used if no other values are detected by the client. The default value is 'pc105/en'. To modify this the value must be in format layout/distribution


Default link
^^^^^^^^^^^^

The connection link is set by this paramenter unless the client overrides this value. 

....
vma.default.client.link 
....

Possible values for this key are: 

local
adsl  (Default)
modem


Further than this parameters the vma can have keys for hooks, this keys are covered in the next section.


Hooks
-----

Introduction
~~~~~~~~~~~~
Hooks are scritps that the VMA run in the virtual machine at certain situations and that allows to modify the platform behavior with the purpose of adapt it to a concrete problematic.

Each possible hook it's configured by adding an entry to the configuration file "/etc/qvd/vma.conf" with the script path to be executed. 

For example, adding this line

....
  vma.on_action.connect = /etc/qvd/hooks/connect.sh
....

It makes that the script "/etc/qvd/hooks/connect.sh" will be executed everytime that the user connects to the virtual machine.

Scripts can receive by the command line paramentes related to the following entities:

  - State changes, acction, or the provisioning process that has triggered the call to the hook. 

  - Virtual machine properties defined in the administration database

  - Parameters generated by the authentication plugins. 

  - User connection parameters.

  - Parameters supply by the client program. 

Hooks have their own log file, that by default is /var/logs/qvd/qvd-hooks.log in the virtual machine. 


Action hooks
~~~~~~~~~~~~

Action hooks are executed everytime that an action begins.

If hook fails with an non zero error code action will be aborted. 

All action hooks receive this paramenters. 

  - "qvd.vm.session.state": Current X-Windows server state

  - "qvd.hook.on_action": Action that triggers the hook.


connect
^^^^^^^

key: *vma.on_action.connect*

This hook is executed when user start (or resume) an X-Windows session from the QVD's client. 

It also receives the following parameters 

  - "qvd.vm.user.name" : user's login. 

  - "qvd.vm.user.groups" : groups that the user belong. 

  - "qvd.vm.user.home" : User's directory home. 

More connection parameters and those assigned in the database to the VM and those generated by the authentication plugin.  

pre-connect
^^^^^^^^^^^

key: *vma.on_action.pre-connect*

This hook is executed when user start (or resume) an X-Windows session from t
he QVD's client.

The difference respect to the connect hooks is that pre-connect hooks are executed before the provisioning hooks, while connect hooks are executed after the provisioning hooks. 

Parameterers for pre-connect are the sames that for connect. 


stop
^^^^

key: *vma.on_action.stop*

This hook is executed when a X-Windows session is asked to be closed (for example via administration tool).

There is no additional paramentes for this hook.

suspend
^^^^^^^

key: *vma.on_action.suspend*

This hook is executed when an X-Windows session is suspended (for expample if an user has closed the QVD Client program)

There is no additional paramentes for this hook.

poweroff
^^^^^^^^

key: *vma.on_action.poweroff*

This hook is executed when the virtual machine is shuted down. 

There is no additional paramentes for this hook.


State hooks
~~~~~~~~~~~

State hooks are executed when happens a change in the X-Windows session

They'll receive the parameter "qvd.hook.on_state" with the current X-Windows state. 

connected
^^^^^^^^^

key: *vma.on_state.connected*

This hook is executed once a connection has been succefusly established between the QVD client and the X-Windows server that runs in the virtual machine. 

suspended
^^^^^^^^^

key: *vma.on_state.suspended*

This hook executes once the user closes the QVD client and the X-Windows session is in the suspended state

stopped
^^^^^^^

key: *vma.on_state.disconnected*

This hook executes when the X-Windows session ends.


Provisioning hooks
~~~~~~~~~~~~~~~~~~

The provisioning hooks recieve the same parameters that the 'connect' actin hook.


mount_home
^^^^^^^^^^

key: *vma.on_provisioning.mount_home*

By default, QVD mounts the first partition of the device configured with the entry "vma.user.home.drive" on the directory "/home" where the user's directory home is created (by the hook 'add_user'). In case that this partition does not exist is created on the fly.

With this hook it is possible to change this proccess by example mount "/home" from an NFS server


add_user
^^^^^^^^

key: *vma.on_provisioning.add_user*

When a user is connected for first time, if the user still does nor exists a new account is created for him in the virtual machine.

By default the account is created with the useradd "command"

The hook 'add_user' allows to modify this proccess and create the user account in other ways


after_add_user
^^^^^^^^^^^^^^

key: *vma.on_provisioning.after_add_user*

Once the user account has been created, this hoon can be used to make some additonals actions as by example to configure the user's email client or any other actions. 


Printing hooks
~~~~~~~~~~~~~~

Also exist a set of hooks that allow to manage the printers configuration, but at the moment theses are considered privates, and a responsability of QVD's development team and therefore they can't be modified by the platform administrator.

Printing hooks receive as parameter the configuration from the VMA.

connected
^^^^^^^^^

key: *internal.vma.on_printing.connected*

This hook receive the same parameters that tha 'connect' action hook

suspended
^^^^^^^^^

key: *internal.vma.on_printing.suspended*

stopped
^^^^^^^

key: *internal.vma.on_printing.stopped*


Serial port configuration
--------------------------

To configure the serial port we'll do the following as root user in the image that we've previously created

....

#sudo editor /etc/init/ttyS0.conf

....

Add the configuration

....

# ttyS0 - getty
#
# This service maintains a getty on ttyS0 from the point the system is
# started until it is shut down again.

start on stopped rc RUNLEVEL=[2345]
stop on runlevel [!2345]

respawn
exec /sbin/getty -L 115200 ttyS0 xterm

....


To capture the output sent to the consoles by the guest OSs, set

....

  vm.vnc.redirect=0
  vm.serial.redirect=0
  vm.serial.capture=1
  path.serial.captures=/var/tmp/qvd/

....

In order to allow accessing the consoles using the QVD admin tool (the default configuration), set the following options:

....

  vm.vnc.redirect=0
  vm.serial.redirect=1

....
The console can be accessed using qvd-admin, for instance:

....

  $ qvd-admin vm console -f id=1

....


To enable a graphics console accessible via VNC (not recommended as it wastes a lot of memory), the following settings must be configured:

....

  vm.vnc.redirect=1
  vm.serial.redirect=0
  vm.serial.capture=0

....

and obviously, the guest OS image has also to be configured to not use the serial console.
