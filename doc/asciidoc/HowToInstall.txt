How to install QVD {qvdversion} 
===============================
Santiago Doblas
v0.1, 9 december 2010
:author initials: SD
:email: sdoblas@qindel.com


Introduction
------------

QVD {qvdversion} is composed of several parts:

* QVD client,
* QVD server,
* Administration tools, and
* PostgreSQL DBMS. 

These components can be installed on the same system for testing and evaluation. For production use we recommend using separate machines for the database, administration tools, and QVD servers.

General Requirements
--------------------

The QVD components require the Ubuntu 10.04 (Lucid Lynx) GNU/Linux operating system. Add the following line to /etc/apt/sources.list on any systems where you intend to install QVD components.
----
# vi /etc/apt/sources.list
deb http://qvd.qindel.com/debian lucid main
----

Execute apt-get update after modifying sources.list.

To check the architecture of the solution and a list of the packages, see QVD overview. 

Client installation
-------------------

The QVD client is included in the package qvd-client. You can install it with the following command.
----
sudo apt-get install qvd-client
----

After that, QVD client is accessible in the GNOME menu under Applications -> Internet.

Configuring network
-------------------

For simple network architectures you can use this script for bridge creation:

----
BRIDGE=qvdnet0 
# La interfaz de la ruta de por defecto 
IFACE=$(/sbin/ip route list | awk '/^default / { print $5 }') 
GATEWAY=$(/sbin/ip route list | awk '/^default / { print $3 }') 
ADDRESS=$(ip addr show $IFACE | awk '/inet / { print $2 }') 
brctl addbr $BRIDGE 
brctl addif $BRIDGE $IFACE 
ifconfig $IFACE 0.0.0.0 up 
ifconfig $BRIDGE $ADDRESS up 
ip route add default via $GATEWAY dev $BRIDGE
----

Database installation
---------------------

The preferred way to install the central database is with the package qvd-db. It installs the PostgreSQL database system if needed.

NOTE: At the moment QVD works only on PostgreSQL 8.

To install run as root:
----
root@myserver:~# apt-get install qvd-db
----

After installing qvd-db you have to perform various manual steps. They are

   1. creating a user account,
   2. creating a database,
   3. changing the database configuration, and
   4. deploying the QVD database schema. 

The first two steps need to be performed using the database administrator account, postgres. Use the following sudo command to change from your normal user to the postgres account.
----
$ sudo su - postgres
----

Creating an user account
~~~~~~~~~~~~~~~~~~~~~~~~

If you wish to use an existing user account you can skip this step.

Once you have access to the database, you can create user accounts with the createuser command. It will prompt for a password for the new user and ask some details on the user account. You can answer 'n' to all.

For example, to create a user called QVDUser you would use the following command.
----
postgres@myserver:~$ createuser -P QVDUser
Enter password for new role: passw0rd
Enter it again: passw0rd
Shall the new role be a superuser? (y/n) n
Shall the new role be allowed to create databases? (y/n) n
Shall the new role be allowed to create more new roles? (y/n) n
----

Creating a new database
~~~~~~~~~~~~~~~~~~~~~~~

Use the createdb command to create a database for QVD. Use the -O switch to set the database's owner to the account you wish to use.
----
postgres@myserver:~$ createdb -O QVDUser QVDDatabase
----

Changing PostgreSQL configuration 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

QVD uses transactions extensively, and requires a higher level of transaction isolation than is configured by default. You also have to enable network access for the user you have just created. To do this you must edit the PostgreSQL configuration files postgresql.conf and pg_hba.conf. On Ubuntu they are located in /etc/postgresql/8.4/main.

The transaction isolation level is controlled with the default_transaction_isolation setting. To enable network access to PostgreSQL in general, change the listen_addresses setting from 'localhost' to '*'.
----
root@myserver:~# cd /etc/postgresql/8.4/main
root@myserver:/etc/postgresql/8.4/main# vi postgresql.conf
listen_addresses = '*'
default_transaction_isolation = 'serializable'
----

To enable network access for the user qvd, add the following line to pg_hba.conf (its format follows: host database user CIDR-address auth-method [auth-options]).
----
root@myserver:/etc/postgresql/8.4/main# vi pg_hba.conf
host	QVDDatabase	QVDUser		192.168.0.0/24		md5
----

Make sure to replace the default network 192.168.0.0/24 with the network that your QVD platform uses.

Restart PostgreSQL for the changes to take effect.
----
root@myserver:~# /etc/init.d/postgresql-8.4 restart
----

Installing the QVD tables
~~~~~~~~~~~~~~~~~~~~~~~~~

Configure the database, user name and password in the QVD configuration files. Refer to the configuration guide for instructions on how it's done.

Once done, execute qvd-deploy-db.pl. It creates the table structure that QVD needs.
----
# qvd-deploy-db.pl
----

Testing access
~~~~~~~~~~~~~~

The following command lists the tables used by QVD.
----
anyuser@otherserver:~$ psql -U QVDUser -W -h myserver
Password for user qvd: 
psql (8.4.1, server 8.3.10)

qvd=> \d
----

Web Administration Tool
-----------------------

The QVD Web Administration Tool (WAT) provides you a friendly way to manage almost every aspect of the QVD platform from a web browser.

Installation
~~~~~~~~~~~~

Install the package with apt-get:

----
# apt-get install qvd-wat
----
To use qvd-wat you need to edit the QVD configuration file to add the database connection details. Refer to the configuration guide for information on how to do it.

Running
~~~~~~~

The Web Administration Tool is started with the following command.

----
# /etc/init.d/qvd-wat start
----
Now you can test the connection in your browser, visiting  http://yourserver:3000 and log in with the username admin and password admin.

After that, you should change the default password using:
----
# qvd-admin.pl config set wat.admin.password=newpassword
----
The WAT user is independent of QVD user management. This user is unique and only for access to WAT.

Restart to apply the change.
----
# /etc/init.d/qvd-wat start
----
See the user guide for more information on using the web administration tool .

Command line administration tool
--------------------------------

QVD includes a command line administration tool, qvd-admin. It permits scripting all the operations that can be performed using the web administration tool qvd-wat.

While qvd-admin is included with qvd-db and qvd-wat, you may want to be able to use qvd-admin from systems that don't have these packages installed. For example you may want to be able to manage QVD directly from the nodes, or you may want to integrate QVD with an external monitoring tool such as Nagios.

Use apt-get to install qvd-admin:
----
root@otherserver:~# apt-get install qvd-admin
----
To use qvd-admin you need to add the database connection details in the QVD configuration file. Refer to the configuration guide for information on how to do it.

See the qvd-admin user guide for more information on how to use qvd-admin.

Installing the QVD server
-------------------------

In your server, run as root user:
----
root@myserver:~# apt-get install qvd-node
----
Afterwards, create the configuration directory with the following command.
----
root@myserver:~# cp -R /usr/share/qvd/config /etc/qvd
----
Edit the configuration files to add the database connection details. Refer to the configuration guide for information on how to do it.

You need to add the host to the central QVD database. This can be done with either the web administration tool qvd-wat, or with the command line administration tool qvd-admin. If you use qvd-admin you only need to execute the following command. Replace HOSTNAME and 192.168.0.2 with your node's host name and IP address, respectively.
----
# qvd-admin.pl host add name=HOSTNAME address=192.168.0.2
----

Refer to the web administration tool user guide for details on how to add QVD nodes.

QVD uses dnsmasq as a DHCP and DNS server for the virtual machines that run in a node. It has to run controlled by qvd-node, so you have to stop it from starting automatically. This is done with the following commands.
----
# /etc/init.d/dnsmasq stop
# sed -i s/ENABLED=1/ENABLED=0/ /etc/default/dnsmasq
----

Configuring SSL
~~~~~~~~~~~~~~~

The QVD server needs an x509 certificate and private key for securing network connections. For a production installation you should use a certificate issued by a recognized certificate authority, such as Verisign or Thawte. For testing purposes you can use a self-signed certificate.

Use qvd-admin to configure the QVD server's certificate and private key.
----
# qvd-admin.pl config ssl key=path/to/server-private-key.pem cert=path/to/server-certificate.pem
----
If the certificate isn't signed by a trusted authority, it has to be added to the system's trusted certificates directory so that the SSL layer can validate it. To work out what that directory is, run the following command:
----
# openssl version -d
----
The trusted certificates directory is the certs subdirectory below. For example, if the previus command returns /usr/lib/ssl, the trusted certificates directory will be /usr/lib/ssl/certs. Usually this will be a symlink to somewhere else.

The certificate must have a special name in order to be recognized by SSL. This name is the output of the command
----
# openssl x509 -noout -hash -in path/to/server-certificate.pem
----
plus a .0 appended to it at the end. If the resulting file already exists (due to a clash of hashes), you can use .1, .2 and so on.

The usual practice is to place the certificate with an appropriate name, and make a symlink with the name of the hash as explained above. This is so that you can know what certificate corresponds to each hash some time later. You'll end up, then, with two entries in the directory:
----
/usr/lib/ssl/certs/QVD-L7R-cert.pem
/usr/lib/ssl/certs/deadbeef.0 -> QVD-L7R-cert.pem
----

Creating a self-signed certificate
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The openssl tool is required for creating a self-signed certificate. You must first generate a private key.
----
# openssl genrsa 1024 > server-private-key.pem
----
Given the private key, a self-signed certificate is created with the following command.
----
# openssl req -new -x509 -nodes -sha1 -days 60 -key server-private-key.pem > server-certificate.pem
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
+++-----+++
Country Name (2 letter code) [AU]:ES
State or Province Name (full name) [Some-State]:Madrid
Locality Name (eg, city) []:Madrid
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Qindel Group 
Organizational Unit Name (eg, section) []:QVD Team
Common Name (eg, YOUR name) []:qvd.qindel.com
Email Address []:qvd@qindel.com
----

Configuring LDAP authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The frontend server can authenticate users against an external LDAP server. This is controlled by configuration keys in the QVD database that can be changed using the command line administration tool, qvd-admin. For example, to set up authentication against an LDAP server that runs on the machine aguila on the port 3389 with search base dc=example,dc=com you would execute the following command:

# qvd-admin.pl config set l7r.auth.mode=ldap l7r.auth.ldap.host=aguila:3389 l7r.auth.ldap.base=dc=example,dc=com

Running
~~~~~~~

The QVD server is started with the following commands.
----
/etc/init.d/qvd-node start
----

VM Killer
~~~~~~~~~

The vm-killer is a program that ensures that if the qvd-noded daemon dies for any reason, any dangling virtual machine will also be stopped. It has to be run periodically (every minute) from the cron in all the hosts running qvd-node.

The following entry has to be added to root crontab:

----
* * * * *  /usr/bin/qvd-vm-killer.pl
----

Configuration Guide
-------------------

The main QVD configuration file is /etc/qvd/node.conf. A sample is installed in /usr/share/qvd/config. If the configuration file is missing you can create it by copying the sample to /etc/qvd and editing.

You must define at least the nodename and database parameters. See ConfigurationSettings for details on what parameters are configurable.

The sample node.conf is included below for reference.
----
# 
# QVD Node Configuration
#

# Name of this node in QVD. Usually the machine's hostname.
nodename = 

# Database connection information.
# database.host: where the QVD database is found
# database.name: the name of the QVD database
# database.user: the user account needed to connect
# database.password: the password needed to connect
database.host = 
database.name = 
database.user = 
database.password = 

# QVD-WAT authentication settings.
# The username and password required for logging in to qvd-wat
wat.admin.login = 
wat.admin.password =

# Which system user account is used to run QVD daemons
l7r.as_user = root
hkd.as_user = root

# Log level. One of ALL, DEBUG, INFO, WARN, ERROR, FATAL, OFF
log.level = INFO

# Network configuration for virtual machines
vm.network.netmask: 
vm.network.dhcp-range:
vm.network.dns_server:
vm.network.gateway:
----


Installing in single node  (For testing proposals)
--------------------------------------------------

Some considerations must be taken in mind if you are installing in just one node QVD. 

 * If your server has a unique network card an empty bridge must be created in the server, this bridge will be used by the VM's to access the network. 
	
 ** This bridge must have assigned an IP address IN the same private network that your virtual machines will use, and this IP will be their gateway access. To create the bridge you need brctl installed in the server. In order to do this, you must have decided which will be your network configuration. For this example our network will be 10.3.15.0/24 and the gateway 10.3.15.1

----

brctl add qvdnet0
ip addr add 10.3.15.1/24 dev qvdnet0

----

 ** We also need nating network traffic to allow comunication between private virtual machines network and external world. 

---- 

iptables -t nat -A POSTROUTING -o qvdnet0 -j SNAT --to-source 172.26.9.69
iptables -t nat -A PREROUTING -d 172.26.9.69 -p tcp --dport 8443 -j DNAT --to-destination 10.3.15.1

----

 ** As last step we also need allow routing in the server. 

----

echo 1 > /proc/sys/net/ipv4/ip_forward

----

Or edit /etc/sysctl.conf and execute sysctl -p 

 ** To make this configuration persistent after reboots, in Ubuntu add to /etc/network/interfaces

----
iface qvdnet0 inet static
	pre-up brctl addbr qvdnet0
	pre-up iptables -t nat -A POSTROUTING -o qvdnet0 -j SNAT --to-source 172.26.9.69
	pre-up iptables -t nat -A PREROUTING -d 172.26.9.69 -p tcp --dport 8443 -j DNAT --to-destination 10.3.15.1
	address 10.3.15.1
	netmask 255.255.255.0
----


