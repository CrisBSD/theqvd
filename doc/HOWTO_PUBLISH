Document Publishing Toolchain
=============================

This is a short how-to describing the process that is currently used to publish documentation to the website.
You will need the following tools:

* asciidoc
* blogpost (https://github.com/norton/blogpost)
* svn

Current documentation is all located in:

src/trunk/doc/

within Subversion. A shell script is located inside of the ~asciidoc~ folder here to help you build different document types. I only use this script to handle PDF generation. Blogpost is used to update the website without any intermediate steps in document output transformation. 

Updating the Website with HTML Pages from Asciidoc
--------------------------------------------------

Note that we always publish to PREPRO first. That way we can review everything and ensure that the site is set up the way we would like to publish it. We usually dump the PREPRO database and run it through sed to fix any links before copying it across to production. Remember that if you publish something directly to production and it isn't in prepro, it will probably be lost later down the line.

Notes on Blogpost
~~~~~~~~~~~~~~~~~
Creating HTML versions of any webpages takes advantage of the ~blogpost~ tool and its ability to convert Asciidoc to HTML and to upload it directly to wordpress, along with any images that need to be updated, using XML-RPC.

To use blogpost, you will need to download the tool first and put it somewhere in your path. I keep mine in /home/rowan/bin. You will probably need a couple of dependency packages as well. It is best that you look over the README to determine what you need and how the tool works: https://github.com/norton/blogpost/blob/96c241894cd2b8203fe764f874f5e90177d75968/README

You will need to create a configuration file in your home directory with the name .blogpost. E.g:

----
# cat > ~/.blogpost <<EOF
# Wordpress XML_RPC URL (don't forget to append /xmlrpc.php)
URL = 'http://prepro.theqvd.com/xmlrpc.php'

# Wordpress login name.
USERNAME = 'rowan'

# Wordpress password.
PASSWORD = 'mysecretpassword'

EOF
#
----

Make sure you change the username and password to match a functional one in prepro. The account should have admin privileges, and you should test that you are able to login with that account and to create a post/page.

IMPORTANT: Note that we always publish to PREPRO first. That way we can review everything and ensure that the site is set up the way we would like to publish it. We usually dump the PREPRO database and run it through sed to fix any links before copying it across to production. If absolutely necessary, the URL in this file can be changed to point directly to production, but it is very likely that you will run into issues later if you do this. 

Now that blogpost is set up, you can publish a version of any asciidoc file directly to prepro. There are a few things to keep in mind here.

* If the page already exists in prepro, you should get hold of its page id before publishing, or you might end up with a duplicate. You can usually do this by going to the page in wordpress and then choosing to edit it. The page id is in the URL. The page ids that you need to worry about for the manuals are:
    * Getting Started Guide - 686 
    * Admin Manual - 727
* When using blogpost, a metadata file is created for the file that you are uploading it usually has the same name as the file with the extension .blogpost. If you change the RPC URL in your configuration, you will need to remove any of these .blogpost files as they will cause chaos. If you have been consistent and only uploaded to prepro, the .blogpost file will allow you to forget about page ids. The file will also ensure that only images and text that has changed since the last update get uploaded. In some cases, you may find that you need to override this. Blogpost has features to allow you to force an update, but if you really want to force an update fully, nuke the metadata file and use blogpost with the page id that you want to update.
* When creating new pages, blogpost doesn't give you the option to specify a parent topic. This means that once you have added the page to the site, visit the page on the site and edit it to move it manually to the parent that you wish it to appear under. Alternatively, create a new page for the topic before you do the upload and get its page id, and then treat your blogpost submission as an update.
* It is worth running `blogpost.py -h` to check out the options and make some sense of what you are doing. For instance, it is possible to do a dry-run update where you could see what would happen, but the page on the site is not actually updated.

Updating Normal Web Pages
~~~~~~~~~~~~~~~~~~~~~~~~~
Most of the webpages, but not all of them, are written in asciidoc and are accessible via:

* src/trunk/doc/asciidoc/en/website - English Pages (up to date)
* src/trunk/doc/asciidoc/es/website - Spanish Pages (in need of update)

Most of the asciidoc pages have .txt extensions. This should make it relatively easy to distinguish them. Note that some pages may have header modifications etc within Wordpress. However, the vast majority of pages should be updateable using blogpost.

A typical example of a page update using blogpost follows:

----
# blogpost.py post -p --post-id=813 faq.txt 
blogpost: asciidoc: WARNING: faq.txt: line 23: section title out of sequence: expected level 1, got level 2
blogpost: updating published page 'F.A.Q.'...
blogpost: id: 813
blogpost: url: http://prepro.theqvd.com/about-qvd/f-a-q
----

Note that the warning message is due to the choice of heading levels in asciidoc. This is okay, since it means that level 1 headers are not used as they wouldn't render well on the site.

Once the file has been posted, you will see that there is now a metadata file in the directory:

----
ls faq.*
faq.txt	faq.blogpost
----

In future, you would not need the page id to update this post:

----
# blogpost.py post -p faq.txt 
blogpost: asciidoc: WARNING: faq.txt: line 23: section title out of sequence: expected level 1, got level 2
blogpost: skipping unmodified: /home/rowan/Qindel/QVD/src/trunk/doc/asciidoc/en/website/faq.txt
----

In this example, you can see that the metadata file has been checked, and since the document has not been modified since it was last updated it will not bother to submit it online. If this is an error, you can force the update with the --force switch. Equally, if there were media files such as images within this document, they would automatically get uploaded to the site via RPC. Sometimes you need to force this to happen if blogpost does not detect that an image has been updated. This can be achieved using the --force-media switch.

Updating the Manuals
~~~~~~~~~~~~~~~~~~~~
Updating the manuals follows a similar process to updating the webpages. 

There are two main documents that are used as manuals on the website:

* Getting Started Guide (page id 686)
* Administration Manual (page id 727)

Manuals have not yet been translated into Spanish, so for now we only build one set of docs for this.
The asciidoc parents for these are located at:

* src/trunk/doc/asciidoc/en/manuals/GettingStartedGuide.txt
* src/trunk/doc/asciidoc/en/manuals/AdministrationManual.txt

To update one of the manuals you simply change to the appropriate directory and call blogpost.
----
# cd src/trunk/doc/asciidoc/en/manuals/
# blogpost.py post -p --post-id=686 GettingStartedGuide.txt
----

When the manual has been updated, you should review it thoroughly on the website to ensure that it includes all sections, that images have been scaled appropriately and that there are no text-overruns.

Note, since we often copy the database from prepro to production, updates to the documentation in prepro should only relate to the currently released version.


Creating PDF versions of the Manuals
------------------------------------
We currently create PDF versions of the documents and these are uploaded to ironman, where they are accessible for download from the website.

There are two main documents that are used as manuals on the website:

* Getting Started Guide
* Administration Manual

Manuals have not yet been translated into Spanish, so for now we only build one set of docs for this.
The asciidoc parents for these are located at:

* src/trunk/doc/asciidoc/en/manuals/GettingStartedGuide.txt
* src/trunk/doc/asciidoc/en/manuals/AdministrationManual.txt

Styling of the document and the coverpage is handled by documents of the same name with the .sty extension.

To build PDF versions of the documents, you will need to be in the folder that the parent doc is located. You can then run the shell script
to handle the output transformation:

----
# cd /QVD/src/trunk/doc/asciidoc/en/manuals/
# ../../generating_doc.sh pdf AdministrationManual.txt
# ls ../../../pdf
AdministrationManual.pdf
----

Equally, to build the Getting Started Guide:

----
# cd /QVD/src/trunk/doc/asciidoc/en/manuals/
# ../../generating_doc.sh pdf GettingStartedGuide.txt
# ls ../../../pdf
AdministrationManual.pdf  GettingStartedGuide.pdf
----

It is really important to thoroughly review these PDF files before uploading them to the website. Sometimes you will find that there are formatting
issues or includes haven't worked properly or images that are linked to are not rendered. As long as the Asciidoc is valid and parses correctly you
will get no errors or warnings indicating that the PDF that has been rendered is not perfect.

Once you have reviewed the documents and are certain that the PDFs can go live (i.e. they cover the currently released revision of the software and are ready to be published) you can upload them to Ironman.

----
# cd /QVD/src/trunk/doc/pdf
# scp *.pdf root@ironman:/var/www/downloads/docs/
----

The PDF versions of the docs will now be available from the website. You should check that you are able to access them from the site and that there are no permissions related errors.


